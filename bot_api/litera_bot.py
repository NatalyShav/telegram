import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
import requests
from datetime import datetime, timedelta
import random

from config import TOKEN, BOOK_API_KEY

bot = Bot(token=TOKEN)
dp = Dispatcher()

POPULAR_GENRES = [
    "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
    "–¥–µ—Ç–µ–∫—Ç–∏–≤",
    "—Ä–æ–º–∞–Ω",
    "—Ñ—ç–Ω—Ç–µ–∑–∏",
    "–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è",
    "–º–∏—Å—Ç–∏–∫–∞",
    "–±–∏–æ–≥—Ä–∞—Ñ–∏—è",
    "—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ",
    "–ø–æ—ç–∑–∏—è"
]
@dp.message(Command("start"))
async def handle_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∏—Ç—Å—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏ –æ –∫–∏–Ω–æ –∏ –∫–Ω–∏–≥–∞—Ö.\n –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

@dp.message(Command("help"))
async def handle_help(message: Message):
    await message.answer(
        "/fact - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –∫–∏–Ω–æ –∏–ª–∏ –∫–Ω–∏–≥–∞—Ö\n"
        "/newbooks <–∂–∞–Ω—Ä> - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–∂–Ω—ã—Ö –Ω–æ–≤–∏–Ω–æ–∫ –ø–æ –∂–∞–Ω—Ä—É\n"
        "/genres - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤\n"
        "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"
    )

@dp.message(Command("fact"))
async def handle_fact(message: Message):
    fact = get_random_fact()
    await message.answer(fact)

@dp.message(Command("genres"))
async def handle_genres(message: Message):
    genres_str = ", ".join(POPULAR_GENRES)
    await message.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã:\n{genres_str}")

@dp.message(Command("newbooks"))
async def handle_newbooks(message: Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ (–∂–∞–Ω—Ä–∞) –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    text = message.text
    parts = text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∂–∞–Ω—Ä. –ù–∞–ø—Ä–∏–º–µ—Ä: /newbooks —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞")
        return
    genre = parts[1].lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∂–∞–Ω—Ä –≤ —Å–ø–∏—Å–∫–µ
    if genre not in [g.lower() for g in POPULAR_GENRES]:
        await message.answer(
            f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –∂–∞–Ω—Ä '{genre}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:\n" +
            ", ".join(POPULAR_GENRES)
        )
        return

    books_list = get_books_by_genre(genre)

    if books_list:
        response = f"–ö–Ω–∏–∂–Ω—ã–µ –Ω–æ–≤–∏–Ω–∫–∏ –≤ –∂–∞–Ω—Ä–µ '{genre}':\n"
        for book in books_list:
            response += f"üìö {book['title']} ‚Äî {book['authors']}\n"
        await message.answer(response)
    else:
        # –ú–æ–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å, —á—Ç–æ –ø–æ –∂–∞–Ω—Ä—É –Ω–µ—Ç –Ω–æ–≤–∏–Ω–æ–∫, –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π
        await message.answer(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–∏–Ω–∫–∏ –≤ –∂–∞–Ω—Ä–µ '{genre}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä.\n"
            "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤: /genres"
        )


def get_books_by_genre(genre):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Books API –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ –ø–æ –∂–∞–Ω—Ä—É
    url = "https://www.googleapis.com/books/v1/volumes"
    params = {
        'q': f'subject:{genre}',
        'orderBy': 'newest',
        'maxResults': 10,
        'key': BOOK_API_KEY
    }
    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        data = response.json()
        books = []
        for item in data.get('items', []):
            volume_info = item.get('volumeInfo', {})
            title = volume_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            authors = volume_info.get('authors', ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'])
            books.append({
                'title': title,
                'authors': ', '.join(authors)
            })
        return books
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []
def get_random_fact():
    # –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç
    facts = [
        "–ö–Ω–∏–≥–∏ —Å–¥–µ—Ä–∂–∏–≤–∞—é—Ç –≤—Ä–µ–º—è. –ß–µ–º –±–æ–ª—å—à–µ —á–∏—Ç–∞–µ—à—å ‚Äî —Ç–µ–º –¥–æ–ª—å—à–µ –∂–∏–≤—ë—à—å.",
        "–°–∞–º–∞—è –ø—Ä–æ–¥–∞–≤–∞–µ–º–∞—è –∫–Ω–∏–≥–∞ ‚Äî –ë–∏–±–ª–∏—è.",
        "–ü–µ—Ä–≤–∞—è –ø–µ—á–∞—Ç–Ω–∞—è –∫–Ω–∏–≥–∞ ‚Äî –ë–∏–±–ª–∏—è –ì—É—Ç–µ–Ω–±–µ—Ä–≥–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –≤ 1455 –≥–æ–¥—É.",
        "–°–∞–º–∞—è —Ç–æ–ª—Å—Ç–∞—è –∫–Ω–∏–≥–∞ –≤ –º–∏—Ä–µ ‚Äî ¬´–ú–∞—à–∏–Ω–∞¬ª, –∫–æ—Ç–æ—Ä–∞—è –≤–µ—Å–∏—Ç –æ–∫–æ–ª–æ 8 –∫–≥.",
        "–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —É–ª—É—á—à–∞–µ—Ç –ø–∞–º—è—Ç—å."
    ]
    return random.choice(facts)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())